[
    {
        "id": "e4fb5c3412bdbc1a",
        "type": "tab",
        "label": "FoldEasy",
        "disabled": false,
        "info": ""
    },
    {
        "id": "943bc3af08b2d984",
        "type": "mqtt in",
        "z": "e4fb5c3412bdbc1a",
        "name": "Water Level Sensor",
        "topic": "WATER_LEVEL_DATA",
        "qos": "1",
        "datatype": "auto",
        "broker": "5bb1a8fe.f5e358",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 190,
        "y": 100,
        "wires": [
            [
                "e8330cfefa71187b",
                "51a53c36fd17876b"
            ]
        ]
    },
    {
        "id": "e8330cfefa71187b",
        "type": "debug",
        "z": "e4fb5c3412bdbc1a",
        "name": "Raw Water MQTT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 160,
        "wires": []
    },
    {
        "id": "51a53c36fd17876b",
        "type": "function",
        "z": "e4fb5c3412bdbc1a",
        "name": "Process Water Level Data",
        "func": "// Process Water Level Data function\ntry {\n    let payload = msg.payload;\n\n    // If payload is string, parse it\n    if (typeof payload === 'string') {\n        payload = JSON.parse(payload);\n    }\n\n    // Log for debugging\n    node.log(\"Received payload: \" + JSON.stringify(payload));\n\n    // Validate structure - now checking for the correct format\n    if (payload && payload.sensor === 'water_level' &&\n        typeof payload.percent !== 'undefined' &&\n        typeof payload.level !== 'undefined') {\n\n        // Create messages for different UI components\n        return [\n            { payload: Number(payload.percent) },  // For percentage gauge\n            { payload: getWaterLevelText(Number(payload.level)) }  // For status text\n        ];\n    }\n\n    node.error(\"Invalid payload format: \" + JSON.stringify(payload), msg);\n    return null;\n} catch (e) {\n    node.error(\"Processing error: \" + e.message, msg);\n    return null;\n}\n\n// Helper function to get level text\nfunction getWaterLevelText(level) {\n    switch (level) {\n        case 0: return \"Empty\";\n        case 1: return \"Low\";\n        case 2: return \"Medium\";\n        case 3: return \"High\";\n        case 4: return \"Full\";\n        default: return \"Unknown\";\n    }\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 100,
        "wires": [
            [
                "09a65bb04249c2ba",
                "8da13f3c0cd2839f"
            ],
            [
                "55b80e1c240a620e"
            ]
        ]
    },
    {
        "id": "09a65bb04249c2ba",
        "type": "ui_gauge",
        "z": "e4fb5c3412bdbc1a",
        "name": "Water Level",
        "group": "3d98f365a6f69e79",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "wave",
        "title": "Water Level",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": 100,
        "colors": [
            "#ff0000",
            "#e6e600",
            "#00b500"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 830,
        "y": 60,
        "wires": []
    },
    {
        "id": "55b80e1c240a620e",
        "type": "ui_text",
        "z": "e4fb5c3412bdbc1a",
        "group": "3d98f365a6f69e79",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Water Status",
        "label": "Status:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 730,
        "y": 120,
        "wires": []
    },
    {
        "id": "8da13f3c0cd2839f",
        "type": "debug",
        "z": "e4fb5c3412bdbc1a",
        "name": "Processed Water Data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 160,
        "wires": []
    },
    {
        "id": "ca32e0e2dc0f7b79",
        "type": "ui_button",
        "z": "e4fb5c3412bdbc1a",
        "name": "Firmware Update Button",
        "group": "d18b7f3edb7881c1",
        "order": 1,
        "width": 6,
        "height": 2,
        "passthru": false,
        "label": "UPDATE FIRMWARE",
        "tooltip": "Start firmware update process",
        "color": "#ffffff",
        "bgcolor": "#1a75ff",
        "className": "",
        "icon": "fa-download",
        "payload": "fw",
        "payloadType": "str",
        "topic": "MCU_COMMAND_TOPIC",
        "topicType": "str",
        "x": 250,
        "y": 240,
        "wires": [
            [
                "4a0af026c83b7869"
            ]
        ]
    },
    {
        "id": "e7fde16dd9449a6d",
        "type": "ui_button",
        "z": "e4fb5c3412bdbc1a",
        "name": "Golden Image Button",
        "group": "d18b7f3edb7881c1",
        "order": 2,
        "width": 6,
        "height": 2,
        "passthru": false,
        "label": "CREATE GOLDEN IMAGE",
        "tooltip": "Create a golden backup of current firmware",
        "color": "#ffffff",
        "bgcolor": "#ffaa00",
        "className": "",
        "icon": "fa-save",
        "payload": "gold",
        "payloadType": "str",
        "topic": "MCU_COMMAND_TOPIC",
        "topicType": "str",
        "x": 240,
        "y": 300,
        "wires": [
            [
                "f9ae2f7dea4d371f"
            ]
        ]
    },
    {
        "id": "4a0af026c83b7869",
        "type": "mqtt out",
        "z": "e4fb5c3412bdbc1a",
        "name": "FW Update Command",
        "topic": "MCU_COMMAND",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5bb1a8fe.f5e358",
        "x": 570,
        "y": 240,
        "wires": []
    },
    {
        "id": "f9ae2f7dea4d371f",
        "type": "mqtt out",
        "z": "e4fb5c3412bdbc1a",
        "name": "Golden Image Command",
        "topic": "MCU_COMMAND",
        "qos": "1",
        "retain": "false",
        "broker": "5bb1a8fe.f5e358",
        "x": 560,
        "y": 300,
        "wires": []
    },
    {
        "id": "17baeab369b16a4a",
        "type": "mqtt in",
        "z": "e4fb5c3412bdbc1a",
        "name": "Clothes Count",
        "topic": "CLOTHES_COUNT_DATA",
        "qos": "1",
        "datatype": "json",
        "broker": "5bb1a8fe.f5e358",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 220,
        "y": 380,
        "wires": [
            [
                "ca9fc08e5738b1a8"
            ]
        ]
    },
    {
        "id": "ca9fc08e5738b1a8",
        "type": "function",
        "z": "e4fb5c3412bdbc1a",
        "name": "Parse Clothes Data",
        "func": "// Extract data from payload\ntry {\n    let payload = msg.payload;\n\n    // If payload is string, parse it\n    if (typeof payload === 'string') {\n        payload = JSON.parse(payload);\n    }\n\n    msg.payload = {\n        count: payload.sensor === \"clothes_count\" ? payload.count : payload.clothesCount,\n        status: payload.status,\n        timestamp: new Date().toISOString()\n    };\n\n    // Set topic for dashboard\n    msg.topic = \"clothes_count\";\n\n    return msg;\n} catch (e) {\n    node.error(\"Processing error: \" + e.message, msg);\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 380,
        "wires": [
            [
                "09931d52306fa415",
                "4d2fa83afe574a0e",
                "748d7c642eed61ef"
            ]
        ]
    },
    {
        "id": "09931d52306fa415",
        "type": "ui_gauge",
        "z": "e4fb5c3412bdbc1a",
        "name": "Clothes Count",
        "group": "a95437d164cc571c",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Clothes Count",
        "label": "items",
        "format": "{{msg.payload.count}}",
        "min": 0,
        "max": 20,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "10",
        "seg2": "15",
        "x": 620,
        "y": 360,
        "wires": []
    },
    {
        "id": "4d2fa83afe574a0e",
        "type": "ui_text",
        "z": "e4fb5c3412bdbc1a",
        "group": "a95437d164cc571c",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Status",
        "label": "Status",
        "format": "{{msg.payload.status}}",
        "layout": "row-spread",
        "className": "",
        "x": 620,
        "y": 400,
        "wires": []
    },
    {
        "id": "748d7c642eed61ef",
        "type": "debug",
        "z": "e4fb5c3412bdbc1a",
        "name": "Clothes Data Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 440,
        "wires": []
    },
    {
        "id": "5bb1a8fe.f5e358",
        "type": "mqtt-broker",
        "name": "Azure VM MQTT Broker",
        "broker": "135.119.172.220",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "3d98f365a6f69e79",
        "type": "ui_group",
        "name": "Water Level",
        "tab": "f5c779a0.6b7148",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d18b7f3edb7881c1",
        "type": "ui_group",
        "name": "Firmware Management",
        "tab": "f5c779a0.6b7148",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a95437d164cc571c",
        "type": "ui_group",
        "name": "Clothes Monitoring",
        "tab": "f5c779a0.6b7148",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f5c779a0.6b7148",
        "type": "ui_tab",
        "name": "IR Sensor Monitor",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]